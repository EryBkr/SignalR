#pragma checksum "C:\Users\Blackerback\OneDrive\Masaüstü\NetCoreSignalR\SignalR.API\SignalR.API.Web\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "eed0e7d78e90b2d2403a337092587848af804ce5"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Blackerback\OneDrive\Masaüstü\NetCoreSignalR\SignalR.API\SignalR.API.Web\Views\_ViewImports.cshtml"
using SignalR.API.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Blackerback\OneDrive\Masaüstü\NetCoreSignalR\SignalR.API\SignalR.API.Web\Views\_ViewImports.cshtml"
using SignalR.API.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"eed0e7d78e90b2d2403a337092587848af804ce5", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1da49d42d30ca5022fc871664c4a825701f602f2", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/signalr/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Blackerback\OneDrive\Masaüstü\NetCoreSignalR\SignalR.API\SignalR.API.Web\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<div class=""row"">
    <div class=""col-md-8 offset-2"">
        <input type=""text"" id=""txtName"" class=""form-control"" />
        <hr />
        <button class=""btn btn-primary"" id=""btnNameSave"">Save Name</button>
        <button class=""btn btn-success"" id=""btnTeamName"">Takıma Oyuncu Ekle</button>
        <button class=""btn btn-warning"" id=""btnAddProduct"">Ürün Ekle</button>
        <div class=""alert alert-info mt-2"">
            <div class=""float-left"">Bağlantı Durumu: <strong id=""conStatus""></strong>  Kişi Sayısı: <strong id=""clientCount"">0</strong></div>
            <div class=""float-right"">
                <div id=""loading"" class=""spinner-border"" role=""status"">
                    <span class=""sr-only"">Loading...</span>
                </div>
            </div>
            <div class=""clearfix""></div>
        </div>

        <div class=""alert alert-warning"">
            <div><strong id=""notify""></strong></div>
        </div>
    </div>
    <div class=""col-md-8 offset-2"">
        <ul cl");
            WriteLiteral(@"ass=""list-group"" id=""nameList""></ul>
    </div>
</div>

<div class=""row"">
    <div class=""col-md-8 offset-md-2"">
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""teamGroup"" value=""Barcelona"" />
            <label class=""form-check-label"">Barcelona</label>
        </div>
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""teamGroup"" value=""Real Madrid"" />
            <label class=""form-check-label"">Real Madrid</label>
        </div>
    </div>
    <div class=""col-md-8 offset-2"">
        <div class=""row"">
            <div class=""col-md-6"">
                <h2>Barcelona</h2>
                <ul class=""list-group"" id=""barcelonaTeamList""></ul>
            </div>
            <div class=""col-md-6"">
                <h2>Real Madrid</h2>
                <ul class=""list-group"" id=""realTeamList""></ul>
            </div>
        </div>

    </div>
</div>




");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n");
                WriteLiteral("    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "eed0e7d78e90b2d2403a337092587848af804ce56071", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

    <script type=""text/javascript"">

        $(document).ready(() => {

            //API Tarafında Signalr bağlantımı domain.com/MyHub şeklinde vermiştim
            //Log seviyesini de belirledim
            //withAutomaicReconnect 0 2 10 30 sn sonra tekrar bağlanmaya çalışacaktır.Bununla birlikte geri dönen durumlara göre kullanıcıyı bilgilendirebiliriz.Default zaman değerlerini değiştirebiliriz.
            //withAutomaticConnectionBuilder kullanıcı ilk başta bağlantı sağladı sonradan bağlantısı koptuğu seneryoda geçerlidir
            var connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withAutomaticReconnect([1000, 1000, 1000, 1000]).withUrl(""https://localhost:44342/MyHub"").build();


            //Bağlantı durumunu Alert div içerisine yazdırdık.
            function statusShow() {
                $('#conStatus').text(connection.connectionState);
            };

            //Bağlantıyı kuruyoruz
            function start() {
               ");
                WriteLiteral(@" connection.start()
                    .then(() => {
                        //Bağlantı başarılı ise then çalışır

                        statusShow();

                        //Server Tarafında ki GetNames Metodunu tetikledik
                        //Artık orada ki metoda subscribe olabileceğiz.
                        /*connection.invoke(""GetNames"");*/

                        //Her iki takımın oyuncu kadrosu en baştan yüklenecek.
                        connection.invoke(""GetNamesByGroup"");

                        //Bağlantı başarılı olduğu için spin i display hale getiriyoruz
                        $(""#loading"").hide();
                    })
                    .catch((err) => {
                        statusShow();
                        console.log(err);

                        //Hata aldıysak eğer 2 sn sonra bağlantı kurma işlemi yeniden denenecektir.
                        setTimeout(() => start(), 2000);
                    });
            };

            //İsim kay");
                WriteLiteral(@"detme butonuna tıklanıldığında
            $(""#btnNameSave"").click(() => {
                //Server tarafında ki SendName metodunu çalıştırdık.Parametre bekleyen bir metot olduğu için paremetre de gönderdik
                connection.invoke(""SendName"", $(""#txtName"").val()).catch((err) => { console.log(err) });
            });

            //Seçtiğimiz Takıma oyuncu ekliyoruz
            $(""#btnTeamName"").click(() => {

                //Player Nane i alıyoruz
                let playerName = $(""#txtName"").val();

                //Seçili olan takımın ismini alıyoruz
                let teamName = $(""input[type=radio]:checked"").val();

                if (teamName == null) {
                    alert(""Takım ismi boş geçilemez"");
                }
                else {
                    //Server tarafına gönderiyoruz, oyuncuyu belirlediğimiz bir takıma kayıt ediyoruz
                    connection.invoke(""SendNameByGroup"", playerName, teamName).catch((err) => {
                        co");
                WriteLiteral(@"nsole.log(err);
                    });
                }


            });

            //Ürün ekleme kısmı.Complex Type Örneği
            $(""#btnAddProduct"").click(() => {

                //Product modelimize uygun bir json yapısı oluşturduk
                let product = { ""Id"": 1, ""Name"": ""Defter"", ""Price"": 100, ""Stock"": 5 };

                //Server a gönderiyoruz
                connection.invoke(""SendProduct"", product);

            });

            statusShow();
            start();

            //Tekrar bağlanmaya çalışıyoruz Hub a
            connection.onreconnecting(err => {

                //Bağlanırken spini aktif ediyoruz
                $(""#loading"").show();

                statusShow();
                console.log(""hata: "" + err);
            });

            //Tekrar bağlanma işlemi başarılı
            //Bağlantı durumunda connectiontId ataması yapılır
            connection.onreconnected(connectionId => {

                //Bağlantı başarılı olduğu iç");
                WriteLiteral(@"in spin i display none hale getiriyoruz
                $(""#loading"").hide();

                statusShow();

                alert(connectionId);
            });

            //Bağlantı başarısız oldu sayfa yenilenmeden tekrar bağlantı kurulmaya çalışılmayacaktır
            connection.onclose(() => {

                //Bağlantı başarısız olduğu için spin i display none hale getiriyoruz
                $(""#loading"").hide();
                statusShow();

                //Başta bağlantı kurduk, tekrar bağlantıyı kaybettiğimiz zaman tekrar bağlanmaya çalışacağız
                start();

            });

            //MyHub a istek yaptıktan sonra tetiklenecek metoda subscribe oluyoruz
            connection.on(""ReceiveName"", (name) => {
                //Server dan tetiklenen ve parametre gönderen metodu tetikledik parametreyi alıp UI da işledik
                $(""#nameList"").append(`<li class=""list-group-item"">${name}</li>`);
            });

            //Sayfada ki aktif kişi say");
                WriteLiteral(@"ısı değiştiğinde UI tarafında kişi sayısı güncellenecektir.
            connection.on(""ReceiveClientCount"", (count) => {
                $(""#clientCount"").text(count);
            });

            //API tarafında end point e istek geldiği zaman UI  tarafında subscription olacağımız yapıyı tanımladık.Alert içerisine mesaj yazacaktır
            connection.on(""Notify"", (description) => {
                $(""#notify"").text(description);
            });

            //Takım sayısının verilen değerden daha fazla olması durumunda server tarafından tetiklenecektir.Endpoint e yapılan istek sonucu tetiklenecektir.
            connection.on(""Error"", (errorText) => {
                alert(errorText);
            });

            //Invoke metoduyla Server daki GetNames metoduna istek attık.Oranın tetikleyeceği metoda subscribe oluyoruz
            connection.on(""ReceiveNames"", (names) => {

                //Her Hub a bağlanıldığında listenin içini temizliyoruz ki dublicate datalar oluşmasın
           ");
                WriteLiteral(@"     $(""#namelist"").empty();

                //Listemize static list te bulunan dataları sayfa yüklendiği anda eklemiş oluyoruz
                for (var i = 0; i < names.length; i++) {
                    $(""#nameList"").append(`<li class=""list-group-item"">${names[i]}</li>`);
                }
            });

            //Takıma oyuncu kaydettiğimiz zaman server tarafından tetiklenecek metodumuzu tanımladık
            connection.on(""ReceiveMessageByGroup"", (name, teamName) => {
                //Gelen takım adına göre kaydedeceğimiz listeyi belirliyoruz
                if (teamName === ""Barcelona"")
                    $(""#barcelonaTeamList"").append(`<li class=""list-group-item"">${name}</li>`);

                else if (teamName === ""Real Madrid"")
                    $(""#realTeamList"").append(`<li class=""list-group-item"">${name}</li>`);
            });

            //Start içerisinde tetiklediğimiz ""GetNamesByGroup"" metodundan sonra finalde şuan ki metoda subscribe olduk.Oyuncu listeleme iş");
                WriteLiteral(@"lemini gerçekleştireceğiz
            connection.on(""ReceiveNamesByGroup"", (teams) => {

                //Takımlar ve içerisinde ki oyuncuları aldık
                teams.forEach((team, index) => {

                    if (team.teamName === ""Barcelona"") {
                        team.users.forEach((user, index) => {
                            $(""#barcelonaTeamList"").append(`<li class=""list-group-item"">${user.name}</li>`);

                        });
                    }

                    else if (team.teamName === ""Real Madrid"") {
                        team.users.forEach((user, index) => {
                            $(""#realTeamList"").append(`<li class=""list-group-item"">${user.name}</li>`);

                        });
                    }
                });
            });

            connection.on(""ReceiveProduct"", (product) => {
                alert(`${product.id} numaralı ${product.name} isimli ${product.price} ürün başarıyla eklenilmiştir`);
            });

      ");
                WriteLiteral(@"      //Radio butonumuz değiştiği zaman yapılacaklar
            $(""input[type=radio]"").change(() => {
                //Seçili değeri alıyoruz
                let groupName = $(""input[type=radio]:checked"").val();

                //Server daki gruba dahil olma kodunu çalıştırıyoruz
                connection.invoke(""AddToGroup"", groupName);

                //Hangi gruptan çıkacağımıza karar veriyoruz
                var removedGroupName = groupName === ""Barcelona"" ? ""Real Madrid"" : ""Barcelona"";

                //Server tarafında ki gruptan çıkma komutunu çalıştırıyoruz
                connection.invoke(""RemoveToGroup"", removedGroupName);
            });
        });
    </script>
");
            }
            );
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
